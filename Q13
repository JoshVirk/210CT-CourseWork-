class Node_Tree:

  def __init__(self, Num):# This will create a new node
        self.Num = Num
        self.left = None
        self.right = None

def iterate(root):
     
   # Set current to root of binary tree
    C_Node = root 
    s = [] 
    Complete = 0
    
    while(not Complete):
         
        
        if C_Node is not None:# Go to the left most Node 
        
          s.append(C_Node)# Place pointer to a tree on the stack before traversing the left subtree
         
            C_Node = C_Node.left 
        
        else:# Go back to the top of the subtree if the current node is empty
            if(len(s) >0 ):
                C_Node = s.pop()
                print (C_Node.Num)
        
                C_Node = C_Node.right 
                 #This will set the right subtree to be looked at now that we have checked the left
            else:
                Complete = 1 

root = Node_Tree(6)#These are the nodes and the numbers assigned to each node when the program is run.
root.left = Node_Tree(4)
root.left.left = Node_Tree(3)
root.left.right = Node_Tree(5)
root.left.left.left = Node_Tree(2)
root.right = Node_Tree(10)
root.right.right = Node_Tree(11)
iterate(root)#Runs the functions
